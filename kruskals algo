#include "bits/stdc++.h"
#include <ext/pb_ds/assoc_container.hpp>
using namespace __gnu_pbds;
using namespace std;
using namespace chrono;

#define ff              first
#define ss              second
#define pb              push_back
#define mp              make_pair
#define pii             pair<int,int>
#define vi              vector<int>
#define vll             vector<long long>
#define mii             map<int,int>
#define mll             map<long long,long long>
#define pqb             priority_queue<int>
#define pqs             priority_queue<int,vi,greater<int> >
#define setbits(x)      __builtin_popcountll(x)
#define zrobits(x)      __builtin_ctzll(x)
#define inf             1e18
#define ps(x,y)         fixed<<setprecision(y)<<x
#define FIO             ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);
#define all(x)          x.begin() , x.end()
mt19937                 rng(chrono::steady_clock::now().time_since_epoch().count());
typedef                 tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> oset;

#ifndef ONLINE_JUDGE
#define debug(x) cerr << #x <<" "; _print(x); cerr << endl;
#else
#define debug(x)
#endif

typedef long long ll;
typedef unsigned long long ull;
typedef long double lld;

void _print(ll t) {cerr << t;}
void _print(int t) {cerr << t;}
void _print(string t) {cerr << t;}
void _print(char t) {cerr << t;}
void _print(lld t) {cerr << t;}
void _print(double t) {cerr << t;}
void _print(ull t) {cerr << t;}

template <class T, class V> void _print(pair <T, V> p);
template <class T> void _print(vector <T> v);
template <class T> void _print(set <T> v);
template <class T, class V> void _print(map <T, V> v);
template <class T> void _print(multiset <T> v);
template <class T> void _print(deque <T> v);
template <class T, class V> void _print(pair <T, V> p) {cerr << "{"; _print(p.ff); cerr << ","; _print(p.ss); cerr << "}";}
template <class T> void _print(vector <T> v) {cerr << "[ "; for (T i : v) {_print(i); cerr << " ";} cerr << "]";}
template <class T> void _print(set <T> v) {cerr << "[ "; for (T i : v) {_print(i); cerr << " ";} cerr << "]";}
template <class T> void _print(multiset <T> v) {cerr << "[ "; for (T i : v) {_print(i); cerr << " ";} cerr << "]";}
template <class T, class V> void _print(map <T, V> v) {cerr << "[ "; for (auto i : v) {_print(i); cerr << " ";} cerr << "]";}
template <class T> void _print(deque <T> v) {cerr << "[ "; for (T i : v) {_print(i); cerr << " ";} cerr << "]";}



ll gcd(ll a, ll b) {if (b > a) {return gcd(b, a);} if (b == 0) {return a;} return gcd(b, a % b);}
ll expo(ll a, ll b, ll mod) {ll res = 1; while (b > 0) {if (b & 1)res = (res * a) % mod; a = (a * a) % mod; b = b >> 1;} return res;}
void extendgcd(ll a, ll b, ll*v) {if (b == 0) {v[0] = 1; v[1] = 0; v[2] = a; return ;} extendgcd(b, a % b, v); ll x = v[1]; v[1] = v[0] - v[1] * (a / b); v[0] = x; return;} //pass an arry of size1 3
ll mminvprime(ll a, ll b) {return expo(a, b - 2, b);}
vector<ll> sieve(int n) {int*arr = new int[n + 1](); vector<ll> vect; for (int i = 2; i <= n; i++)if (arr[i] == 0) {vect.push_back(i); for (int j = 2 * i; j <= n; j += i)arr[j] = 1;} return vect;}
ll mod_add(ll a, ll b, ll m) {a = a % m; b = b % m; return (((a + b) % m) + m) % m;}
ll mod_mul(ll a, ll b, ll m) {a = a % m; b = b % m; return (((a * b) % m) + m) % m;}
ll mod_sub(ll a, ll b, ll m) {a = a % m; b = b % m; return (((a - b) % m) + m) % m;}
ll mod_div(ll a, ll b, ll m) {a = a % m; b = b % m; return (mod_mul(a, mminvprime(b, m), m) + m) % m;}  //only for prime m



void a_k_s()
{

#ifndef ONLINE_JUDGE
	/*freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);*/
	freopen("Error.txt", "w", stderr);

#endif
}

const int maxn = 2e5 + 5;
const int MOD = 1e9 + 7;
const int MM = 998244353;

const int N = 1e5 + 1;


struct node
{
	ll u, v, w;
	node(ll ux, ll vx, ll wx)
	{
		u = ux;
		v = vx;
		w = wx;

	}
};

ll find_par(ll node, vector<ll> &parent)
{
	if (node == parent[node])
		return node;
	return parent[node] = find_par(parent[node], parent);
}

void unionn(ll u, ll v, vector<ll> &rank, vll &parent)
{
	u = find_par(u, parent);
	v = find_par(v, parent);
	if (rank[u] > rank[v])
	{
		parent[v] = u;
	}
	else if (rank[u] < rank[v])
	{
		parent[u] = v;

	}
	else
	{
		parent[u] = v;
		rank[v]++;
	}


}
bool cmp(node a, node b)
{
	return a.w < b.w;
}


void solve()
{
	ll n, m;
	cin >> n >> m;
	vector<node> g;
	while (m--)
	{
		ll u, v, w;
		cin >> w >> u >> v;
		g.pb(node(u, v, w));



	}


	sort(all(g), cmp);
	vll parent(n), rank(n, 0);
	for (int i = 0; i < n; ++i)
	{
		parent[i] = i;
	}
	vector<pair<ll, ll>> ans;
	ll cost = 0;
	for (auto x : g)
	{
		ll u = x.u;
		ll v = x.v;
		ll w = x.w;
		if (find_par(u, parent) != find_par(v, parent))
		{
			unionn(u, v, rank, parent);
			cost += w;
			ans.pb({u, v});


		}
	}
	debug(ans)
	debug(cost)
	for (auto x : ans)
	{
		cout << x.ff << " " << x.ss << '\n';
	}
	cout << cost << '\n';




}





int32_t main()
{

	FIO;
	a_k_s();
	auto start1 = high_resolution_clock::now();


	ll t = 1;


	//cin >> t;

	while (t--)
	{
		solve();
	}


	auto stop1 = high_resolution_clock::now();
	auto duration = duration_cast<microseconds>(stop1 - start1);
#ifndef ONLINE_JUDGE
	cerr << "Time: " << duration . count() / 1000 << endl;
#endif


}
